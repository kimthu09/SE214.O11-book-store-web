basePath: /v1
definitions:
  authormodel.Author:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  authormodel.Filter:
    properties:
      searchKey:
        type: string
    type: object
  authormodel.ReqCreateAuthor:
    properties:
      name:
        example: Nguyễn Nhật Ánh
        type: string
    type: object
  authormodel.ResCreateAuthor:
    properties:
      id:
        type: string
    type: object
  authormodel.ResListAuthor:
    properties:
      data:
        items:
          $ref: '#/definitions/authormodel.Author'
        type: array
      filter:
        $ref: '#/definitions/authormodel.Filter'
      paging:
        $ref: '#/definitions/common.Paging'
    type: object
  booktitlemodel.BookTitle:
    properties:
      authorIds:
        items:
          type: string
        type: array
      categoryIds:
        items:
          type: string
        type: array
      createdAt:
        type: string
      deletedAt:
        type: string
      desc:
        type: string
      id:
        type: string
      isActive:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  booktitlemodel.Filter:
    properties:
      createdAtFrom:
        example: 1709500431
        type: integer
      createdAtTo:
        example: 1709500431
        type: integer
      isActive:
        example: true
        type: boolean
      searchKey:
        example: ""
        type: string
    type: object
  booktitlemodel.ReqCreateBookTitle:
    properties:
      authorIds:
        example:
        - tgnna
        items:
          type: string
        type: array
      categoryIds:
        example:
        - dmtt
        - dmtruyen
        items:
          type: string
        type: array
      desc:
        example: Tôi Là Bêtô là tác phẩm của nhà văn chuyên viết cho thanh thiếu niên
          Nguyễn Nhật Ánh.
        type: string
      id:
        example: bookId
        type: string
      name:
        example: Tôi là Bêtô
        type: string
    type: object
  booktitlemodel.ResBookTitleDetail:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  booktitlemodel.ResCreateBookTitle:
    properties:
      id:
        type: string
    type: object
  booktitlemodel.ResListBookTitle:
    properties:
      data:
        items:
          $ref: '#/definitions/booktitlemodel.BookTitle'
        type: array
      filter:
        $ref: '#/definitions/booktitlemodel.Filter'
      paging:
        $ref: '#/definitions/common.Paging'
    type: object
  categorymodel.Category:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  categorymodel.Filter:
    properties:
      searchKey:
        type: string
    type: object
  categorymodel.ReqCreateCategory:
    properties:
      name:
        example: Trinh thám
        type: string
    type: object
  categorymodel.ResCreateCategory:
    properties:
      id:
        type: string
    type: object
  categorymodel.ResListCategory:
    properties:
      data:
        items:
          $ref: '#/definitions/categorymodel.Category'
        type: array
      filter:
        $ref: '#/definitions/categorymodel.Filter'
      paging:
        $ref: '#/definitions/common.Paging'
    type: object
  common.Paging:
    properties:
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 11
        type: integer
    type: object
  common.ResSuccess:
    properties:
      data:
        example: true
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: 21520095@gm.uit.edu.vn
    name: Bui Vi Quoc
    url: https://www.facebook.com/bviquoc/
  title: Book Store Management API
  version: "1.0"
paths:
  /authors:
    get:
      consumes:
      - application/json
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authormodel.ResListAuthor'
      summary: Get all authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      parameters:
      - description: Create author
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/authormodel.ReqCreateAuthor'
      produces:
      - application/json
      responses:
        "200":
          description: author id
          schema:
            $ref: '#/definitions/authormodel.ResCreateAuthor'
      summary: Create author with name
      tags:
      - authors
  /booktitles:
    get:
      consumes:
      - application/json
      parameters:
      - example: 10
        in: query
        name: limit
        type: integer
      - example: 1
        in: query
        name: page
        type: integer
      - example: 11
        in: query
        name: total
        type: integer
      - example: 1709500431
        in: query
        name: createdAtFrom
        type: integer
      - example: 1709500431
        in: query
        name: createdAtTo
        type: integer
      - example: true
        in: query
        name: isActive
        type: boolean
      - example: ""
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/booktitlemodel.ResListBookTitle'
      summary: Get all booktitles
      tags:
      - booktitles
    post:
      consumes:
      - application/json
      parameters:
      - description: Create booktitle
        in: body
        name: booktitle
        required: true
        schema:
          $ref: '#/definitions/booktitlemodel.ReqCreateBookTitle'
      produces:
      - application/json
      responses:
        "200":
          description: booktitle id
          schema:
            $ref: '#/definitions/booktitlemodel.ResCreateBookTitle'
      summary: Create booktitle name, desc, authors, categories.
      tags:
      - booktitles
  /booktitles/:id:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ResSuccess'
      summary: Delete booktitle by id
      tags:
      - booktitles
  /categories:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/categorymodel.ResListCategory'
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      parameters:
      - description: Create category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/categorymodel.ReqCreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: category id
          schema:
            $ref: '#/definitions/categorymodel.ResCreateCategory'
      summary: Create category with name
      tags:
      - categories
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
